# –í—ã–≤–æ–¥–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–æ–ø-–∑–∞—è–≤–∫–∏).

import requests
import time
from datetime import datetime
from threading import Thread
import asyncio


class SilentMoexPriceAlert:
    def __init__(self, bot=None, loop=None):
        self.bot = bot
        self.loop = loop or asyncio.get_event_loop()
        self.alerts = {}
        self.running = False

    def add_alert(self, ticker, price, direction, user_id=0):
        if ticker not in self.alerts:
            self.alerts[ticker] = []

        self.alerts[ticker].append({
            'price': float(price),
            'direction': direction.lower(),
            'triggered': False,
            'user_id': user_id
        })

    def check_price(self, ticker):
        url = "https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities.json"
        params = {
            "iss.meta": "off",
            "securities": ticker,
            "marketdata.columns": "SECID,LAST"
        }

        try:
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            marketdata = data["marketdata"]["data"]
            return float(marketdata[0][1]) if marketdata and marketdata[0][1] else None
        except Exception:
            return None

    async def send_alert(self, user_id, message):
        if self.bot:
            try:
                await self.bot.send_message(user_id, message)
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏]: {e}")
        else:
            print(message)

    def monitor(self, interval=10):
        self.running = True
        print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω...")

        while self.running:
            try:
                for ticker in list(self.alerts.keys()):
                    price = self.check_price(ticker)
                    if price is None:
                        continue

                    for alert in self.alerts[ticker]:
                        if alert['triggered']:
                            continue

                        condition_met = (
                            (alert['direction'] == 'long' and price >= alert['price']) or
                            (alert['direction'] == 'short' and price <= alert['price'])
                        )

                        if condition_met:
                            alert['triggered'] = True
                            direction = "–≤—ã—à–µ" if alert['direction'] == 'long' else "–Ω–∏–∂–µ"
                            message = (
                                f"üîî –ê–õ–ï–†–¢! {ticker} –¥–æ—Å—Ç–∏–≥ {alert['price']} —Ä—É–±. "
                                f"(—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {price} —Ä—É–±., –¥–≤–∏–∂–µ–Ω–∏–µ {direction} —É—Ä–æ–≤–Ω—è)"
                            )

                            # –ö–æ—Ä—É—Ç–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                            asyncio.run_coroutine_threadsafe(
                                self.send_alert(alert['user_id'], message),
                                self.loop
                            )

                time.sleep(interval)

            except Exception as e:
                print(f"[ERROR]: {e}")
                time.sleep(60)

    def start_monitoring(self, interval=10):
        Thread(target=self.monitor, args=(interval,), daemon=True).start()

    def stop_monitoring(self):
        self.running = False

def setup_alerts(alert_system):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    print("\n–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—É—Ä–æ–≤–Ω–µ–π (—Ñ–æ—Ä–º–∞—Ç: —Ç–∏–∫–µ—Ä —Ü–µ–Ω–∞ long/short)")
    print("–ü—Ä–∏–º–µ—Ä: GAZP 160 short - –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∏–∂–µ 160")
    print("–ü—Ä–∏–º–µ—Ä: SBER 300 long - –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä–æ—Å—Ç–µ –≤—ã—à–µ 300")
    print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'q'\n")

    while True:
        try:
            user_input = input("> ").strip()
            if user_input.lower() == 'q':
                break

            parts = user_input.split()
            if len(parts) != 3:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–ò–ö–ï–† –¶–ï–ù–ê long/short")
                continue

            ticker, price, direction = parts
            if direction.lower() not in ('long', 'short'):
                print("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'long' –∏–ª–∏ 'short'")
                continue

            alert_system.add_alert(ticker, price, direction)
            print(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç: {ticker} {direction} {price}")

        except ValueError:
            print("–û—à–∏–±–∫–∞: —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        except Exception:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    alert_system = SilentMoexPriceAlert()

    print("–¢–∏—Ö–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω MOEX (–±–µ–∑ –ª–æ–≥–æ–≤)")
    setup_alerts(alert_system)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤

    if alert_system.alerts:
        alert_system.start_monitoring()  # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        print("\n–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")
        print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

        try:
            while True:
                time.sleep(1)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
        except KeyboardInterrupt:
            alert_system.stop_monitoring()
            print("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("–ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞")


if __name__ == "__main__":
    main()