import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

import current_price
from price_level import SilentMoexPriceAlert

# üîÑ FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
class BotStates(StatesGroup):
    waiting_for_tickers = State()
    waiting_for_alert = State()



API_TOKEN = '7858545674:AAEYs1HHQprXYhSfTPmL5wnipX1WNu8heHQ'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

alert_system = SilentMoexPriceAlert(bot=bot)  # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º —Å—é–¥–∞ –±–æ—Ç–∞
alert_system.start_monitoring()

# üß© –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/price"), KeyboardButton(text="/add_alert")],
            [KeyboardButton(text="/my_alerts"), KeyboardButton(text="/help")]
        ],
        resize_keyboard=True
    )


# /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "üìà –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –ë–∏—Ä–∂–∏.",
        reply_markup=get_main_keyboard()
    )


# /help
@dp.message(Command("help"))
async def send_help(message: types.Message):
    await message.answer(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/price ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã (–≤–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)\n"
        "/add_alert ‚Äî —Å–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç\n"
        "/my_alerts ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–∏ –∞–ª–µ—Ä—Ç—ã"
    )


# /price ‚Äî –Ω–∞—á–∞–ª–æ
@dp.message(Command("price"))
async def price_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.waiting_for_tickers)
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: SBER GAZP)")


# price ‚Äî –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–æ–≤
@dp.message(BotStates.waiting_for_tickers)
async def get_prices(message: types.Message, state: FSMContext):
    tickers = [t.upper() for t in message.text.strip().split()]
    quotes = current_price.get_current_price(tickers)
    await state.clear()

    if quotes:
        response = "üìä –¢–µ–∫—É—â–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏:\n"
        for ticker, price in quotes.items():
            response += f"{ticker}: {price} —Ä—É–±.\n"
        await message.answer(response)
    else:
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä—ã.")


# /add_alert ‚Äî –Ω–∞—á–∞–ª–æ
@dp.message(Command("add_alert"))
async def alert_start(message: types.Message, state: FSMContext):
    await state.set_state(BotStates.waiting_for_alert)
    await message.answer("üì• –í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä, —Ü–µ–Ω—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: SBER 300 long)")


# add_alert ‚Äî –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.message(BotStates.waiting_for_alert)
async def process_alert(message: types.Message, state: FSMContext):
    args = message.text.strip().split()
    await state.clear()

    if len(args) != 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: TICKER PRICE DIRECTION\n–ü—Ä–∏–º–µ—Ä: SBER 300 long")
        return

    ticker, price_str, direction = args
    ticker = ticker.upper()
    direction = direction.lower()

    try:
        price = float(price_str)
    except ValueError:
        await message.answer("‚ùó –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if direction not in ('long', 'short'):
        await message.answer("‚ùó –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'long' –∏–ª–∏ 'short'")
        return

    # üß† –î–æ–±–∞–≤–ª—è–µ–º user_id –≤ alert
    alert_system.add_alert(ticker, price, direction, message.from_user.id)
    dir_text = "–≤—ã—à–µ" if direction == 'long' else "–Ω–∏–∂–µ"
    await message.answer(f"‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {ticker} {price} —Ä—É–±. ({dir_text})")


@dp.message(Command("my_alerts"))
async def show_alerts(message: types.Message):
    user_id = message.from_user.id
    response = "üìå –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:\n\n"
    has_alerts = False

    for ticker, alerts in alert_system.alerts.items():
        for alert in alerts:
            if not alert['triggered'] and alert['user_id'] == user_id:
                direction = "‚Üë –≤—ã—à–µ" if alert['direction'] == 'long' else "‚Üì –Ω–∏–∂–µ"
                response += f"{ticker}: {alert['price']} —Ä—É–±. ({direction})\n"
                has_alerts = True

    if has_alerts:
        await message.answer(response)
    else:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.")



# ‚è∞ –ü—Å–µ–≤–¥–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ);;;
async def send_alert_notifications():
    while True:
        # TODO: –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å SilentMoexPriceAlert —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤ Telegram –ø–æ user_id
        await asyncio.sleep(10)


# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    asyncio.create_task(send_alert_notifications())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
